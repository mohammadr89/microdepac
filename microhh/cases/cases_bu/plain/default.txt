netcdf plume_chem.default.0010800 {
dimensions:
	z = 32 ;
	zh = 33 ;
	time = UNLIMITED ; // (180 currently)
	zs = 4 ;
	zsh = 5 ;
variables:
	double time(time) ;
		time:units = "seconds since start" ;
		time:long_name = "Time" ;
	double z(z) ;
		z:units = "m" ;
		z:long_name = "Full level height" ;
	double zh(zh) ;
		zh:units = "m" ;
		zh:long_name = "Half level height" ;
	double zs(zs) ;
		zs:units = "m" ;
		zs:long_name = "Full level height soil" ;
	double zsh(zsh) ;
		zsh:units = "m" ;
		zsh:long_name = "Half level height soil" ;

group: default {
  variables:
  	int iter(time) ;
  		iter:units = "-" ;
  		iter:long_name = "Iteration number" ;
  	double area(time, z) ;
  		area:units = "-" ;
  		area:long_name = "Fractional area contained in mask" ;
  	double areah(time, zh) ;
  		areah:units = "-" ;
  		areah:long_name = "Fractional area contained in mask" ;
  	double nh3(time, z) ;
  		nh3:units = "-" ;
  		nh3:long_name = "nh3" ;
  	double nh3_3(time, z) ;
  		nh3_3:units = "-" ;
  		nh3_3:long_name = "Moment 3 of the nh3" ;
  	double nh3_4(time, z) ;
  		nh3_4:units = "-" ;
  		nh3_4:long_name = "Moment 4 of the nh3" ;
  	double nh3_diff(time, zh) ;
  		nh3_diff:units = "m s-1" ;
  		nh3_diff:long_name = "Diffusive flux of the nh3" ;
  	double nh3_w(time, zh) ;
  		nh3_w:units = "m s-1" ;
  		nh3_w:long_name = "Turbulent flux of the nh3" ;
  	double nh3_grad(time, zh) ;
  		nh3_grad:units = "m-1" ;
  		nh3_grad:long_name = "Gradient of the nh3" ;
  	double nh3_2(time, z) ;
  		nh3_2:units = "-" ;
  		nh3_2:long_name = "Moment 2 of the nh3" ;
  	double nh3_path(time) ;
  		nh3_path:units = "kg m-2" ;
  		nh3_path:long_name = "nh3 path" ;
  	double nh3_flux(time, zh) ;
  		nh3_flux:units = "m s-1" ;
  		nh3_flux:long_name = "Total flux of the nh3" ;
  	double u(time, z) ;
  		u:units = "m s-1" ;
  		u:long_name = "U velocity" ;
  	double u_3(time, z) ;
  		u_3:units = "m3 s-3" ;
  		u_3:long_name = "Moment 3 of the U velocity" ;
  	double u_4(time, z) ;
  		u_4:units = "m4 s-4" ;
  		u_4:long_name = "Moment 4 of the U velocity" ;
  	double u_diff(time, zh) ;
  		u_diff:units = "m2 s-2" ;
  		u_diff:long_name = "Diffusive flux of the U velocity" ;
  	double u_w(time, zh) ;
  		u_w:units = "m2 s-2" ;
  		u_w:long_name = "Turbulent flux of the U velocity" ;
  	double u_grad(time, zh) ;
  		u_grad:units = "s-1" ;
  		u_grad:long_name = "Gradient of the U velocity" ;
  	double u_2(time, z) ;
  		u_2:units = "m2 s-2" ;
  		u_2:long_name = "Moment 2 of the U velocity" ;
  	double u_path(time) ;
  		u_path:units = "m-1 s-1 kg" ;
  		u_path:long_name = "U velocity path" ;
  	double u_flux(time, zh) ;
  		u_flux:units = "m2 s-2" ;
  		u_flux:long_name = "Total flux of the U velocity" ;
  	double v(time, z) ;
  		v:units = "m s-1" ;
  		v:long_name = "V velocity" ;
  	double v_3(time, z) ;
  		v_3:units = "m3 s-3" ;
  		v_3:long_name = "Moment 3 of the V velocity" ;
  	double v_4(time, z) ;
  		v_4:units = "m4 s-4" ;
  		v_4:long_name = "Moment 4 of the V velocity" ;
  	double v_diff(time, zh) ;
  		v_diff:units = "m2 s-2" ;
  		v_diff:long_name = "Diffusive flux of the V velocity" ;
  	double v_w(time, zh) ;
  		v_w:units = "m2 s-2" ;
  		v_w:long_name = "Turbulent flux of the V velocity" ;
  	double v_grad(time, zh) ;
  		v_grad:units = "s-1" ;
  		v_grad:long_name = "Gradient of the V velocity" ;
  	double v_2(time, z) ;
  		v_2:units = "m2 s-2" ;
  		v_2:long_name = "Moment 2 of the V velocity" ;
  	double v_path(time) ;
  		v_path:units = "m-1 s-1 kg" ;
  		v_path:long_name = "V velocity path" ;
  	double v_flux(time, zh) ;
  		v_flux:units = "m2 s-2" ;
  		v_flux:long_name = "Total flux of the V velocity" ;
  	double w(time, zh) ;
  		w:units = "m s-1" ;
  		w:long_name = "Vertical velocity" ;
  	double w_3(time, zh) ;
  		w_3:units = "m3 s-3" ;
  		w_3:long_name = "Moment 3 of the Vertical velocity" ;
  	double w_4(time, zh) ;
  		w_4:units = "m4 s-4" ;
  		w_4:long_name = "Moment 4 of the Vertical velocity" ;
  	double w_2(time, zh) ;
  		w_2:units = "m2 s-2" ;
  		w_2:long_name = "Moment 2 of the Vertical velocity" ;
  	double p(time, z) ;
  		p:units = "Pa" ;
  		p:long_name = "Pressure" ;
  	double p_grad(time, zh) ;
  		p_grad:units = "Pa m-1" ;
  		p_grad:long_name = "Gradient of the Pressure" ;
  	double p_2(time, z) ;
  		p_2:units = "Pa2" ;
  		p_2:long_name = "Moment 2 of the Pressure" ;
  	double p_w(time, zh) ;
  		p_w:units = "Pa m s-1" ;
  		p_w:long_name = "Turbulent flux of the Pressure" ;
  	double ke(time, z) ;
  		ke:units = "m2 s-2" ;
  		ke:long_name = "Kinetic energy" ;
  	double tke(time, z) ;
  		tke:units = "m2 s-2" ;
  		tke:long_name = "Turbulent kinetic energy" ;
  	double nh3_bot(time) ;
  		nh3_bot:units = "-" ;
  		nh3_bot:long_name = "Surface nh3" ;
  	double evisc(time, z) ;
  		evisc:units = "m2 s-1" ;
  		evisc:long_name = "Eddy viscosity" ;
  	double evisc_2(time, z) ;
  		evisc_2:units = "m4 s-2" ;
  		evisc_2:long_name = "Moment 2 of the Eddy viscosity" ;
  } // group default

group: thermo {
  variables:
  	double qt(time, z) ;
  		qt:units = "kg kg-1" ;
  		qt:long_name = "Total water mixing ratio" ;
  	double qt_3(time, z) ;
  		qt_3:units = "kg3 kg-3" ;
  		qt_3:long_name = "Moment 3 of the Total water mixing ratio" ;
  	double qt_4(time, z) ;
  		qt_4:units = "kg4 kg-4" ;
  		qt_4:long_name = "Moment 4 of the Total water mixing ratio" ;
  	double qt_diff(time, zh) ;
  		qt_diff:units = "kg kg-1 m s-1" ;
  		qt_diff:long_name = "Diffusive flux of the Total water mixing ratio" ;
  	double qt_w(time, zh) ;
  		qt_w:units = "kg kg-1 m s-1" ;
  		qt_w:long_name = "Turbulent flux of the Total water mixing ratio" ;
  	double qt_grad(time, zh) ;
  		qt_grad:units = "kg kg-1 m-1" ;
  		qt_grad:long_name = "Gradient of the Total water mixing ratio" ;
  	double qt_2(time, z) ;
  		qt_2:units = "kg2 kg-2" ;
  		qt_2:long_name = "Moment 2 of the Total water mixing ratio" ;
  	double qt_path(time) ;
  		qt_path:units = "kg m-2" ;
  		qt_path:long_name = "Total water mixing ratio path" ;
  	double qt_flux(time, zh) ;
  		qt_flux:units = "kg kg-1 m s-1" ;
  		qt_flux:long_name = "Total flux of the Total water mixing ratio" ;
  	double thl(time, z) ;
  		thl:units = "K" ;
  		thl:long_name = "Liquid water potential temperature" ;
  	double thl_3(time, z) ;
  		thl_3:units = "K3" ;
  		thl_3:long_name = "Moment 3 of the Liquid water potential temperature" ;
  	double thl_4(time, z) ;
  		thl_4:units = "K4" ;
  		thl_4:long_name = "Moment 4 of the Liquid water potential temperature" ;
  	double thl_diff(time, zh) ;
  		thl_diff:units = "K m s-1" ;
  		thl_diff:long_name = "Diffusive flux of the Liquid water potential temperature" ;
  	double thl_w(time, zh) ;
  		thl_w:units = "K m s-1" ;
  		thl_w:long_name = "Turbulent flux of the Liquid water potential temperature" ;
  	double thl_grad(time, zh) ;
  		thl_grad:units = "K m-1" ;
  		thl_grad:long_name = "Gradient of the Liquid water potential temperature" ;
  	double thl_2(time, z) ;
  		thl_2:units = "K2" ;
  		thl_2:long_name = "Moment 2 of the Liquid water potential temperature" ;
  	double thl_path(time) ;
  		thl_path:units = "K kg m-2" ;
  		thl_path:long_name = "Liquid water potential temperature path" ;
  	double thl_flux(time, zh) ;
  		thl_flux:units = "K m s-1" ;
  		thl_flux:long_name = "Total flux of the Liquid water potential temperature" ;
  	double qt_bot(time) ;
  		qt_bot:units = "kg kg-1" ;
  		qt_bot:long_name = "Surface Total water mixing ratio" ;
  	double thl_bot(time) ;
  		thl_bot:units = "K" ;
  		thl_bot:long_name = "Surface Liquid water potential temperature" ;
  	double rhoref(z) ;
  		rhoref:units = "kg m-3" ;
  		rhoref:long_name = "Full level basic state density" ;
  	double rhorefh(zh) ;
  		rhorefh:units = "kg m-3" ;
  		rhorefh:long_name = "Half level basic state density" ;
  	double thvref(z) ;
  		thvref:units = "K" ;
  		thvref:long_name = "Full level basic state virtual potential temperature" ;
  	double thvrefh(zh) ;
  		thvrefh:units = "K" ;
  		thvrefh:long_name = "Half level basic state virtual potential temperature" ;
  	double phydro(time, z) ;
  		phydro:units = "Pa" ;
  		phydro:long_name = "Full level hydrostatic pressure" ;
  	double phydroh(time, zh) ;
  		phydroh:units = "Pa" ;
  		phydroh:long_name = "Half level hydrostatic pressure" ;
  	double rho(time, z) ;
  		rho:units = "kg m-3" ;
  		rho:long_name = "Full level density" ;
  	double rhoh(time, zh) ;
  		rhoh:units = "kg m-3" ;
  		rhoh:long_name = "Half level density" ;
  	double thv(time, z) ;
  		thv:units = "K" ;
  		thv:long_name = "Virtual potential temperature" ;
  	double thv_diff(time, zh) ;
  		thv_diff:units = "K m s-1" ;
  		thv_diff:long_name = "Diffusive flux of the Virtual potential temperature" ;
  	double thv_w(time, zh) ;
  		thv_w:units = "K m s-1" ;
  		thv_w:long_name = "Turbulent flux of the Virtual potential temperature" ;
  	double thv_grad(time, zh) ;
  		thv_grad:units = "K m-1" ;
  		thv_grad:long_name = "Gradient of the Virtual potential temperature" ;
  	double thv_2(time, z) ;
  		thv_2:units = "K2" ;
  		thv_2:long_name = "Moment 2 of the Virtual potential temperature" ;
  	double thv_flux(time, zh) ;
  		thv_flux:units = "K m s-1" ;
  		thv_flux:long_name = "Total flux of the Virtual potential temperature" ;
  	double T(time, z) ;
  		T:units = "K" ;
  		T:long_name = "Absolute temperature" ;
  	double T_2(time, z) ;
  		T_2:units = "K2" ;
  		T_2:long_name = "Moment 2 of the Absolute temperature" ;
  	double ql(time, z) ;
  		ql:units = "kg kg-1" ;
  		ql:long_name = "Liquid water" ;
  	double ql_diff(time, zh) ;
  		ql_diff:units = "kg kg-1 m s-1" ;
  		ql_diff:long_name = "Diffusive flux of the Liquid water" ;
  	double ql_w(time, zh) ;
  		ql_w:units = "kg kg-1 m s-1" ;
  		ql_w:long_name = "Turbulent flux of the Liquid water" ;
  	double ql_frac(time, z) ;
  		ql_frac:units = "-" ;
  		ql_frac:long_name = "Liquid water fraction" ;
  	double ql_grad(time, zh) ;
  		ql_grad:units = "kg kg-1 m-1" ;
  		ql_grad:long_name = "Gradient of the Liquid water" ;
  	double ql_cover(time) ;
  		ql_cover:units = "-" ;
  		ql_cover:long_name = "Liquid water cover" ;
  	double ql_path(time) ;
  		ql_path:units = "kg m-2" ;
  		ql_path:long_name = "Liquid water path" ;
  	double ql_flux(time, zh) ;
  		ql_flux:units = "kg kg-1 m s-1" ;
  		ql_flux:long_name = "Total flux of the Liquid water" ;
  	double qi(time, z) ;
  		qi:units = "kg kg-1" ;
  		qi:long_name = "Ice" ;
  	double qi_frac(time, z) ;
  		qi_frac:units = "-" ;
  		qi_frac:long_name = "Ice fraction" ;
  	double qi_cover(time) ;
  		qi_cover:units = "-" ;
  		qi_cover:long_name = "Ice cover" ;
  	double qi_path(time) ;
  		qi_path:units = "kg m-2" ;
  		qi_path:long_name = "Ice path" ;
  	double qlqi(time, z) ;
  		qlqi:units = "kg kg-1" ;
  		qlqi:long_name = "Liquid water and ice" ;
  	double qlqi_frac(time, z) ;
  		qlqi_frac:units = "-" ;
  		qlqi_frac:long_name = "Liquid water and ice fraction" ;
  	double qlqi_cover(time) ;
  		qlqi_cover:units = "-" ;
  		qlqi_cover:long_name = "Liquid water and ice cover" ;
  	double qlqi_path(time) ;
  		qlqi_path:units = "kg m-2" ;
  		qlqi_path:long_name = "Liquid water and ice path" ;
  	double qsat(time, z) ;
  		qsat:units = "kg kg-1" ;
  		qsat:long_name = "Saturated water vapor" ;
  	double qsat_path(time) ;
  		qsat_path:units = "kg m-2" ;
  		qsat_path:long_name = "Saturated water vapor path" ;
  	double rh(time, z) ;
  		rh:units = "-" ;
  		rh:long_name = "Relative humidity" ;
  	double zi(time) ;
  		zi:units = "m" ;
  		zi:long_name = "Boundary Layer Depth" ;
  	double wt_buoy(time, zh) ;
  		wt_buoy:units = "m s-2" ;
  		wt_buoy:long_name = "Buoyancy Tendency of Vertical velocity" ;
  } // group thermo

group: tend {
  variables:
  	double wt_total(time, zh) ;
  		wt_total:units = "m s-2" ;
  		wt_total:long_name = "Total Tendency of Vertical velocity" ;
  	double ut_damp(time, z) ;
  		ut_damp:units = "m s-2" ;
  		ut_damp:long_name = "Damping Tendency of U velocity" ;
  	double ut_total(time, z) ;
  		ut_total:units = "m s-2" ;
  		ut_total:long_name = "Total Tendency of U velocity" ;
  	double vt_damp(time, z) ;
  		vt_damp:units = "m s-2" ;
  		vt_damp:long_name = "Damping Tendency of V velocity" ;
  	double vt_total(time, z) ;
  		vt_total:units = "m s-2" ;
  		vt_total:long_name = "Total Tendency of V velocity" ;
  	double wt_damp(time, zh) ;
  		wt_damp:units = "m s-2" ;
  		wt_damp:long_name = "Damping Tendency of Vertical velocity" ;
  	double nh3t_damp(time, z) ;
  		nh3t_damp:units = "s-1" ;
  		nh3t_damp:long_name = "Damping Tendency of nh3" ;
  	double nh3t_total(time, z) ;
  		nh3t_total:units = "s-1" ;
  		nh3t_total:long_name = "Total Tendency of nh3" ;
  	double qtt_damp(time, z) ;
  		qtt_damp:units = "kg kg-1 s-1" ;
  		qtt_damp:long_name = "Damping Tendency of Total water mixing ratio" ;
  	double qtt_total(time, z) ;
  		qtt_total:units = "kg kg-1 s-1" ;
  		qtt_total:long_name = "Total Tendency of Total water mixing ratio" ;
  	double thlt_damp(time, z) ;
  		thlt_damp:units = "K s-1" ;
  		thlt_damp:long_name = "Damping Tendency of Liquid water potential temperature" ;
  	double thlt_total(time, z) ;
  		thlt_total:units = "K s-1" ;
  		thlt_total:long_name = "Total Tendency of Liquid water potential temperature" ;
  	double nh3t_limit(time, z) ;
  		nh3t_limit:units = "s-1" ;
  		nh3t_limit:long_name = "Limiter Tendency of nh3" ;
  	double ut_pres(time, z) ;
  		ut_pres:units = "m s-2" ;
  		ut_pres:long_name = "Pressure Tendency of U velocity" ;
  	double vt_pres(time, z) ;
  		vt_pres:units = "m s-2" ;
  		vt_pres:long_name = "Pressure Tendency of V velocity" ;
  	double wt_pres(time, zh) ;
  		wt_pres:units = "m s-2" ;
  		wt_pres:long_name = "Pressure Tendency of Vertical velocity" ;
  	double ut_advec(time, z) ;
  		ut_advec:units = "m s-2" ;
  		ut_advec:long_name = "Advection Tendency of U velocity" ;
  	double vt_advec(time, z) ;
  		vt_advec:units = "m s-2" ;
  		vt_advec:long_name = "Advection Tendency of V velocity" ;
  	double wt_advec(time, zh) ;
  		wt_advec:units = "m s-2" ;
  		wt_advec:long_name = "Advection Tendency of Vertical velocity" ;
  	double nh3t_advec(time, z) ;
  		nh3t_advec:units = "s-1" ;
  		nh3t_advec:long_name = "Advection Tendency of nh3" ;
  	double qtt_advec(time, z) ;
  		qtt_advec:units = "kg kg-1 s-1" ;
  		qtt_advec:long_name = "Advection Tendency of Total water mixing ratio" ;
  	double thlt_advec(time, z) ;
  		thlt_advec:units = "K s-1" ;
  		thlt_advec:long_name = "Advection Tendency of Liquid water potential temperature" ;
  	double ut_diff(time, z) ;
  		ut_diff:units = "m s-2" ;
  		ut_diff:long_name = "Diffusion Tendency of U velocity" ;
  	double vt_diff(time, z) ;
  		vt_diff:units = "m s-2" ;
  		vt_diff:long_name = "Diffusion Tendency of V velocity" ;
  	double wt_diff(time, zh) ;
  		wt_diff:units = "m s-2" ;
  		wt_diff:long_name = "Diffusion Tendency of Vertical velocity" ;
  	double nh3t_diff(time, z) ;
  		nh3t_diff:units = "s-1" ;
  		nh3t_diff:long_name = "Diffusion Tendency of nh3" ;
  	double qtt_diff(time, z) ;
  		qtt_diff:units = "kg kg-1 s-1" ;
  		qtt_diff:long_name = "Diffusion Tendency of Total water mixing ratio" ;
  	double thlt_diff(time, z) ;
  		thlt_diff:units = "K s-1" ;
  		thlt_diff:long_name = "Diffusion Tendency of Liquid water potential temperature" ;
  } // group tend

group: land_surface {
  variables:
  	double ustar(time) ;
  		ustar:units = "m s-1" ;
  		ustar:long_name = "Surface friction velocity" ;
  	double obuk(time) ;
  		obuk:units = "m" ;
  		obuk:long_name = "Obukhov length" ;
  	double wl(time) ;
  		wl:units = "m" ;
  		wl:long_name = "Liquid water reservoir" ;
  	double H(time) ;
  		H:units = "W m-2" ;
  		H:long_name = "Surface sensible heat flux" ;
  	double LE(time) ;
  		LE:units = "W m-2" ;
  		LE:long_name = "Surface latent heat flux" ;
  	double G(time) ;
  		G:units = "W m-2" ;
  		G:long_name = "Surface soil heat flux" ;
  	double S(time) ;
  		S:units = "W m-2" ;
  		S:long_name = "Surface storage heat flux" ;
  	double t(time, zs) ;
  		t:units = "K" ;
  		t:long_name = "Soil temperature" ;
  	double theta(time, zs) ;
  		theta:units = "-" ;
  		theta:long_name = "Soil volumetric water content" ;
  } // group land_surface

group: land_surface_tiles {
  variables:
  	double c_soil(time) ;
  		c_soil:units = "-" ;
  		c_soil:long_name = "Subgrid fraction bare soil" ;
  	double ustar_soil(time) ;
  		ustar_soil:units = "m s-1" ;
  		ustar_soil:long_name = "Surface friction velocity bare soil" ;
  	double obuk_soil(time) ;
  		obuk_soil:units = "m" ;
  		obuk_soil:long_name = "Obukhov length bare soil" ;
  	double rs_soil(time) ;
  		rs_soil:units = "s m-1" ;
  		rs_soil:long_name = "Canopy resistance bare soil" ;
  	double ra_soil(time) ;
  		ra_soil:units = "s m-1" ;
  		ra_soil:long_name = "Aerodynamic resistance bare soil" ;
  	double thl_bot_soil(time) ;
  		thl_bot_soil:units = "K" ;
  		thl_bot_soil:long_name = "Surface potential temperature bare soil" ;
  	double qt_bot_soil(time) ;
  		qt_bot_soil:units = "kg kg-1" ;
  		qt_bot_soil:long_name = "Surface specific humidity bare soil" ;
  	double H_soil(time) ;
  		H_soil:units = "W m-2" ;
  		H_soil:long_name = "Surface sensible heat flux bare soil" ;
  	double LE_soil(time) ;
  		LE_soil:units = "W m-2" ;
  		LE_soil:long_name = "Surface latent heat flux bare soil" ;
  	double G_soil(time) ;
  		G_soil:units = "W m-2" ;
  		G_soil:long_name = "Surface soil heat flux bare soil" ;
  	double S_soil(time) ;
  		S_soil:units = "W m-2" ;
  		S_soil:long_name = "Surface storage heat flux bare soil" ;
  	double c_veg(time) ;
  		c_veg:units = "-" ;
  		c_veg:long_name = "Subgrid fraction vegetation" ;
  	double ustar_veg(time) ;
  		ustar_veg:units = "m s-1" ;
  		ustar_veg:long_name = "Surface friction velocity vegetation" ;
  	double obuk_veg(time) ;
  		obuk_veg:units = "m" ;
  		obuk_veg:long_name = "Obukhov length vegetation" ;
  	double rs_veg(time) ;
  		rs_veg:units = "s m-1" ;
  		rs_veg:long_name = "Canopy resistance vegetation" ;
  	double ra_veg(time) ;
  		ra_veg:units = "s m-1" ;
  		ra_veg:long_name = "Aerodynamic resistance vegetation" ;
  	double thl_bot_veg(time) ;
  		thl_bot_veg:units = "K" ;
  		thl_bot_veg:long_name = "Surface potential temperature vegetation" ;
  	double qt_bot_veg(time) ;
  		qt_bot_veg:units = "kg kg-1" ;
  		qt_bot_veg:long_name = "Surface specific humidity vegetation" ;
  	double H_veg(time) ;
  		H_veg:units = "W m-2" ;
  		H_veg:long_name = "Surface sensible heat flux vegetation" ;
  	double LE_veg(time) ;
  		LE_veg:units = "W m-2" ;
  		LE_veg:long_name = "Surface latent heat flux vegetation" ;
  	double G_veg(time) ;
  		G_veg:units = "W m-2" ;
  		G_veg:long_name = "Surface soil heat flux vegetation" ;
  	double S_veg(time) ;
  		S_veg:units = "W m-2" ;
  		S_veg:long_name = "Surface storage heat flux vegetation" ;
  	double c_wet(time) ;
  		c_wet:units = "-" ;
  		c_wet:long_name = "Subgrid fraction wet skin" ;
  	double ustar_wet(time) ;
  		ustar_wet:units = "m s-1" ;
  		ustar_wet:long_name = "Surface friction velocity wet skin" ;
  	double obuk_wet(time) ;
  		obuk_wet:units = "m" ;
  		obuk_wet:long_name = "Obukhov length wet skin" ;
  	double rs_wet(time) ;
  		rs_wet:units = "s m-1" ;
  		rs_wet:long_name = "Canopy resistance wet skin" ;
  	double ra_wet(time) ;
  		ra_wet:units = "s m-1" ;
  		ra_wet:long_name = "Aerodynamic resistance wet skin" ;
  	double thl_bot_wet(time) ;
  		thl_bot_wet:units = "K" ;
  		thl_bot_wet:long_name = "Surface potential temperature wet skin" ;
  	double qt_bot_wet(time) ;
  		qt_bot_wet:units = "kg kg-1" ;
  		qt_bot_wet:long_name = "Surface specific humidity wet skin" ;
  	double H_wet(time) ;
  		H_wet:units = "W m-2" ;
  		H_wet:long_name = "Surface sensible heat flux wet skin" ;
  	double LE_wet(time) ;
  		LE_wet:units = "W m-2" ;
  		LE_wet:long_name = "Surface latent heat flux wet skin" ;
  	double G_wet(time) ;
  		G_wet:units = "W m-2" ;
  		G_wet:long_name = "Surface soil heat flux wet skin" ;
  	double S_wet(time) ;
  		S_wet:units = "W m-2" ;
  		S_wet:long_name = "Surface storage heat flux wet skin" ;
  } // group land_surface_tiles

group: deposition {
  variables:
  	double vdnh3(time) ;
  		vdnh3:units = "m s-1" ;
  		vdnh3:long_name = "NH3 deposition velocity" ;
  	double flux_nh3(time) ;
  		flux_nh3:units = "mol(NH3) m-2 s-1" ;
  		flux_nh3:long_name = "NH3 surface flux" ;
  	double total_flux_nh3(time) ;
  		total_flux_nh3:units = "mol(NH3) m-2" ;
  		total_flux_nh3:long_name = "NH3 total accumulated surface flux" ;
  } // group deposition

group: budget {
  variables:
  	double u2_shear(time, z) ;
  		u2_shear:units = "m2 s-3" ;
  		u2_shear:long_name = "Shear production term in U2 budget" ;
  	double v2_shear(time, z) ;
  		v2_shear:units = "m2 s-3" ;
  		v2_shear:long_name = "Shear production term in V2 budget" ;
  	double tke_shear(time, z) ;
  		tke_shear:units = "m2 s-3" ;
  		tke_shear:long_name = "Shear production term in TKE budget" ;
  	double uw_shear(time, zh) ;
  		uw_shear:units = "m2 s-3" ;
  		uw_shear:long_name = "Shear production term in UW budget" ;
  	double vw_shear(time, zh) ;
  		vw_shear:units = "m2 s-3" ;
  		vw_shear:long_name = "Shear production term in VW budget" ;
  	double u2_turb(time, z) ;
  		u2_turb:units = "m2 s-3" ;
  		u2_turb:long_name = "Turbulent transport term in U2 budget" ;
  	double v2_turb(time, z) ;
  		v2_turb:units = "m2 s-3" ;
  		v2_turb:long_name = "Turbulent transport term in V2 budget" ;
  	double w2_turb(time, zh) ;
  		w2_turb:units = "m2 s-3" ;
  		w2_turb:long_name = "Turbulent transport term in W2 budget" ;
  	double tke_turb(time, z) ;
  		tke_turb:units = "m2 s-3" ;
  		tke_turb:long_name = "Turbulent transport term in TKE budget" ;
  	double uw_turb(time, zh) ;
  		uw_turb:units = "m2 s-3" ;
  		uw_turb:long_name = "Turbulent transport term in UW budget" ;
  	double vw_turb(time, zh) ;
  		vw_turb:units = "m2 s-3" ;
  		vw_turb:long_name = "Turbulent transport term in VW budget" ;
  	double w2_pres(time, zh) ;
  		w2_pres:units = "m2 s-3" ;
  		w2_pres:long_name = "Pressure transport term in W2 budget" ;
  	double tke_pres(time, z) ;
  		tke_pres:units = "m2 s-3" ;
  		tke_pres:long_name = "Pressure transport term in TKE budget" ;
  	double uw_pres(time, zh) ;
  		uw_pres:units = "m2 s-3" ;
  		uw_pres:long_name = "Pressure transport term in UW budget" ;
  	double vw_pres(time, zh) ;
  		vw_pres:units = "m2 s-3" ;
  		vw_pres:long_name = "Pressure transport term in VW budget" ;
  	double u2_rdstr(time, z) ;
  		u2_rdstr:units = "m2 s-3" ;
  		u2_rdstr:long_name = "Pressure redistribution term in U2 budget" ;
  	double v2_rdstr(time, z) ;
  		v2_rdstr:units = "m2 s-3" ;
  		v2_rdstr:long_name = "Pressure redistribution term in V2 budget" ;
  	double w2_rdstr(time, zh) ;
  		w2_rdstr:units = "m2 s-3" ;
  		w2_rdstr:long_name = "Pressure redistribution term in W2 budget" ;
  	double uw_rdstr(time, zh) ;
  		uw_rdstr:units = "m2 s-3" ;
  		uw_rdstr:long_name = "Pressure redistribution term in UW budget" ;
  	double vw_rdstr(time, zh) ;
  		vw_rdstr:units = "m2 s-3" ;
  		vw_rdstr:long_name = "Pressure redistribution term in VW budget" ;
  	double u2_diff(time, z) ;
  		u2_diff:units = "m2 s-3" ;
  		u2_diff:long_name = "Total diffusive term in U2 budget" ;
  	double v2_diff(time, z) ;
  		v2_diff:units = "m2 s-3" ;
  		v2_diff:long_name = "Total diffusive term in V2 budget" ;
  	double w2_diff(time, zh) ;
  		w2_diff:units = "m2 s-3" ;
  		w2_diff:long_name = "Total diffusive term in W2 budget" ;
  	double tke_diff(time, z) ;
  		tke_diff:units = "m2 s-3" ;
  		tke_diff:long_name = "Total diffusive term in TKE budget" ;
  	double uw_diff(time, zh) ;
  		uw_diff:units = "m2 s-3" ;
  		uw_diff:long_name = "Total diffusive term in UW budget" ;
  	double vw_diff(time, zh) ;
  		vw_diff:units = "m2 s-3" ;
  		vw_diff:long_name = "Total diffusive term in VW budget" ;
  	double w2_buoy(time, zh) ;
  		w2_buoy:units = "m2 s-3" ;
  		w2_buoy:long_name = "Buoyancy production/destruction term in W2 budget" ;
  	double tke_buoy(time, z) ;
  		tke_buoy:units = "m2 s-3" ;
  		tke_buoy:long_name = "Buoyancy production/destruction term in TKE budget" ;
  	double uw_buoy(time, zh) ;
  		uw_buoy:units = "m2 s-3" ;
  		uw_buoy:long_name = "Buoyancy production/destruction term in UW budget" ;
  	double vw_buoy(time, zh) ;
  		vw_buoy:units = "m2 s-3" ;
  		vw_buoy:long_name = "Buoyancy production/destruction term in VW budget" ;
  	double b2_shear(time, z) ;
  		b2_shear:units = "m2 s-5" ;
  		b2_shear:long_name = "Shear production term in B2 budget" ;
  	double b2_turb(time, z) ;
  		b2_turb:units = "m2 s-5" ;
  		b2_turb:long_name = "Turbulent transport term in B2 budget" ;
  	double bw_shear(time, zh) ;
  		bw_shear:units = "m2 s-4" ;
  		bw_shear:long_name = "Shear production term in B2 budget" ;
  	double bw_turb(time, zh) ;
  		bw_turb:units = "m2 s-4" ;
  		bw_turb:long_name = "Turbulent transport term in B2 budget" ;
  	double b2_visc(time, z) ;
  		b2_visc:units = "m2 s-5" ;
  		b2_visc:long_name = "Viscous transport term in B2 budget" ;
  	double b2_diss(time, z) ;
  		b2_diss:units = "m2 s-5" ;
  		b2_diss:long_name = "Dissipation term in B2 budget" ;
  	double bw_visc(time, zh) ;
  		bw_visc:units = "m2 s-4" ;
  		bw_visc:long_name = "Viscous transport term in BW budget" ;
  	double bw_diss(time, zh) ;
  		bw_diss:units = "m2 s-4" ;
  		bw_diss:long_name = "Dissipation term in BW budget" ;
  	double bw_rdstr(time, zh) ;
  		bw_rdstr:units = "m2 s-4" ;
  		bw_rdstr:long_name = "Redistribution term in BW budget" ;
  	double bw_buoy(time, zh) ;
  		bw_buoy:units = "m2 s-4" ;
  		bw_buoy:long_name = "Buoyancy term in BW budget" ;
  	double bw_pres(time, zh) ;
  		bw_pres:units = "m2 s-4" ;
  		bw_pres:long_name = "Pressure transport term in BW budget" ;
  } // group budget
}
